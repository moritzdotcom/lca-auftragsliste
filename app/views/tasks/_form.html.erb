<%= simple_form_for @task, defaults: { wrapper_html: {class: 'input-field'} } do |f| %>
  <%= f.input :task_number, label: 'Auftragsnummer', error: 'Auftragsnummer muss angegeben werden' %>

  <div class="input-date">
    <label for="task_created_at">Ausgestellt am</label>
    <input type="date" value="<%= Date.today %>" name="task[created_at]" id="task_created_at">
  </div>

  <%= f.input :house_id, label: 'Objekt', collection: House.all.map { |house| ([house.address, house.id]) } %>

  <%= f.input :flat_id, as: :hidden, wrapper_html: {class: ''} %>
  <div class="autocomplete-container input flat-autocomplete">
    <label for="task_flat_location">Wohnung</label>
    <input type="text" name="task[flat_location]" id="task_flat_location">
    <div class="autocomplete-input">
      <div id="flat_location_autocomplete" class="autocomplete-box"></div>
    </div>
  </div>

  <%= f.input :tenant_id, as: :hidden, wrapper_html: {class: ''} %>
  <div class="input-field input">
    <label for="task_tenant_name">Mieter</label>
    <input type="text" name="task[tenant_name]" id="task_tenant_name">
  </div>

  <%= f.input :title, label: 'Beschreibung der TÃ¤tigkeit' %>
  <%= f.input :description, label: 'Weitere Bemerkungen' %>

  <div class="input-date">
    <label for="task_due_date">Zu erledigen bis</label>
    <input type="date" value="<%= Date.tomorrow %>" name="task[due_date]" id="task_due_date">
  </div>
  <%= f.input :user_id, label: 'Ausgestellt von', collection: User.all.map { |user| ([user.abbreviated_name, user.id]) } %>
  <%= f.button :submit %>
<% end %>

:partners

<script>
  function fetchFlats(house_id) {
    return fetch('<%= root_url %>/houses/' + house_id + '/flats.json')
      .then(response => response.json())
  };

  function setLabels() {
    document.querySelectorAll('.input').forEach(input => {
      if ((input.querySelector('input') && input.querySelector('input').value) || (input.querySelector('select') && input.querySelector('select').options.selectedIndex != 0) || (input.querySelector('textarea') && input.querySelector('textarea').value)) {
        input.classList.add('has-value')
      }
      else {
        input.classList.remove('has-value')
      }
      input.addEventListener('change', () => {
        if ((input.querySelector('input') && input.querySelector('input').value) || (input.querySelector('select') && input.querySelector('select').options.selectedIndex != 0) || (input.querySelector('textarea') && input.querySelector('textarea').value)) {
          input.classList.add('has-value')
        }
        else {
          input.classList.remove('has-value')
        }
      })
    })
  }

  setLabels()
  hiddenFlatInput = document.getElementById('task_flat_id');
  flatLocationInput = document.getElementById('task_flat_location');
  flatAutocomplete = document.getElementById('flat_location_autocomplete');
  flatAutocompleteContainer = document.querySelector('.flat-autocomplete');

  hiddenTenantInput = document.getElementById('task_tenant_id');
  tenantNameInput = document.getElementById('task_tenant_name');

  houseSelector = document.getElementById('task_house_id');

  houseSelector.addEventListener('change', (e) => {
    flatAutocomplete.innerHTML = ''
    flatAutocompleteContainer.classList.remove('has-value');
    hiddenTenantInput.value = ''
    tenantNameInput.value = ''

    fetchFlats(e.target.value)
      .then(results => {
        results.forEach(result => {
          flatAutocomplete.innerHTML += `<div data-value="${result.id}" data-tenant-id="${result.tenant_id || ''}" data-tenant-name="${result.tenant_name || ''}" class="autocomplete-item autocomplete_flat_item">${result.location}</div>`
        })
        document.querySelectorAll('.autocomplete_flat_item').forEach(flatItem => {
          flatItem.addEventListener('mousedown', () => {
            hiddenFlatInput.value = flatItem.dataset.value;
            flatLocationInput.value = flatItem.innerText;
            flatAutocompleteContainer.classList.add('has-value');

            if (flatItem.dataset.tenantId) {
              hiddenTenantInput.value = flatItem.dataset.tenantId;
              tenantNameInput.value = flatItem.dataset.tenantName;
            } else {
              hiddenTenantInput.value = ''
              tenantNameInput.value = ''
            }
          })
        })
      });
  })

  flatLocationInput.addEventListener('focus', () => {
    flatLocationInput.value = ''
    hiddenFlatInput.value = ''
    flatAutocompleteContainer.classList.remove('has-value');
    hiddenTenantInput.value = ''
    tenantNameInput.value = ''
    flatAutocomplete.style.display = 'block';
  })

  flatLocationInput.addEventListener('blur', () => {
    flatAutocomplete.style.display = 'none';
  })

</script>
