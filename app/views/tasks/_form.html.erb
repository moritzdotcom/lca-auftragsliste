<%= simple_form_for @task, defaults: { wrapper_html: {class: 'input-field'} } do |f| %>
  <%= f.input :task_number, label: 'Auftragsnummer', error: 'Auftragsnummer muss angegeben werden' %>

  <div class="input-date">
    <label for="task_created_at">Ausgestellt am</label>
    <input type="date" value="<%= Date.today %>" name="task[created_at]" id="task_created_at">
  </div>

  <%= f.input :house_id, label: 'Objekt', collection: House.order(:object_number).map { |house| ([house.address, house.id]) }, error: 'Objekt muss angegeben werden' %>

  <%= f.input :flat_id, as: :hidden, wrapper_html: {class: ''} %>
  <div class="input-field input">
    <label for="task_flat_location">Wohnung</label>
    <input list="flat_location_autocomplete" id="task_flat_location" name="task[flat_location]" autocomplete="off"/>

    <datalist id="flat_location_autocomplete">
    </datalist>
  </div>

  <%= f.input :tenant_id, as: :hidden, wrapper_html: {class: ''} %>
  <div class="input-field input">
    <label for="task_tenant_name">Mieter</label>
    <input type="text" name="task[tenant_name]" id="task_tenant_name">
  </div>

  <%= f.input :title, label: 'Beschreibung der TÃ¤tigkeit' %>
  <%= f.input :description, label: 'Weitere Bemerkungen' %>

  <div class="input-date">
    <label for="task_due_date">Zu erledigen bis</label>
    <input type="date" value="<%= Date.tomorrow %>" name="task[due_date]" id="task_due_date">
  </div>
  <% if user_signed_in? %>
    <%= f.input :user_id, label: 'Ausgestellt von', collection: User.all.map { |user| ([user.abbreviated_name, user.id]) }, selected: current_user.id %>
  <% else %>
    <%= f.input :user_id, label: 'Ausgestellt von', collection: User.all.map { |user| ([user.abbreviated_name, user.id]) } %>
  <% end %>

  <%= f.input :partner_array, as: :hidden, wrapper_html: {class: ''} %>
  <div class="input-field input">
    <label for="task_partner_names">Weitergeleitet an</label>
    <input list="partner_array" id="task_partner_names" name="task[partner_array_names]" autocomplete="off"/>
    <div disabled class="button add-partner">&plus;</div>

    <datalist id="partner_array">
      <% Partner.all.each do |partner| %>
        <option data-value="<%= partner.id %>"><%= partner.name %></option>
      <% end %>
    </datalist>
  </div>
  <div class="partner-names"></div>
  <%= f.button :submit, 'Fertig', id: 'submit-button' %>
<% end %>

<script>
  function fetchFlats(house_id) {
    return fetch('<%= root_url %>/houses/' + house_id + '/flats.json')
      .then(response => response.json())
  };

  function setLabels() {
    document.querySelectorAll('.input').forEach(input => {
      if ((input.querySelector('input') && input.querySelector('input').value) || (input.querySelector('select') && input.querySelector('select').options.selectedIndex != 0) || (input.querySelector('textarea') && input.querySelector('textarea').value)) {
        input.classList.add('has-value')
      }
      else {
        input.classList.remove('has-value')
      }
      input.addEventListener('change', () => {
        if ((input.querySelector('input') && input.querySelector('input').value) || (input.querySelector('select') && input.querySelector('select').options.selectedIndex != 0) || (input.querySelector('textarea') && input.querySelector('textarea').value)) {
          input.classList.add('has-value')
        }
        else {
          input.classList.remove('has-value')
        }
      })
    })
  }

  setLabels()
  hiddenFlatInput = document.getElementById('task_flat_id');
  flatLocationInput = document.getElementById('task_flat_location');
  flatAutocomplete = document.getElementById('flat_location_autocomplete');

  hiddenTenantInput = document.getElementById('task_tenant_id');
  tenantNameInput = document.getElementById('task_tenant_name');

  addPartnerButton = document.querySelector('.add-partner');
  partnerInput = document.getElementById('task_partner_names');
  hiddenPartnerInput = document.getElementById('task_partner_array');
  partnerAutocomplete = document.getElementById('partner_array');
  partnerNames = document.querySelector('.partner-names');

  submitButton = document.getElementById('submit-button');

  houseSelector = document.getElementById('task_house_id');

  houseSelector.addEventListener('change', (e) => {
    flatAutocomplete.innerHTML = ''
    hiddenTenantInput.value = ''
    tenantNameInput.value = ''

    fetchFlats(e.target.value)
      .then(results => {
        results.forEach(result => {
          flatAutocomplete.innerHTML += `<option data-value="${result.id}" data-tenant-id="${result.tenant_id || ''}" data-tenant-name="${result.tenant_name || ''}">${result.location}</option>`
        })
      })
  })

  flatLocationInput.addEventListener('input', (e) => {
    input = e.target;
    options = flatAutocomplete.querySelectorAll('option');
    inputValue = input.value;

    hiddenFlatInput.value = ''
    hiddenTenantInput.value = '';
    tenantNameInput.value = '';
    tenantNameInput.parentElement.classList.remove('has-value');

    options.forEach(option => {
      if (option.innerText == inputValue) {
        hiddenFlatInput.value = option.dataset.value;

        if (option.dataset.tenantId) {
          hiddenTenantInput.value = option.dataset.tenantId;
          tenantNameInput.value = option.dataset.tenantName;
          tenantNameInput.parentElement.classList.add('has-value');
        }
      }
    })
  })

  function deletePartner() {
    hiddenPartnerInput.value = hiddenPartnerInput.value.split(';&').filter(partner => partner != event.target.dataset.delete).join(';&')

    event.target.parentNode.remove()
  }

  addPartnerButton.addEventListener('click', () => {
    if (partnerInput.value && !hiddenPartnerInput.value.split(';&').includes(partnerInput.value)) {
      partnerId = null;
      options = partnerAutocomplete.querySelectorAll('option');

      options.forEach(option => {
        if (option.innerText == partnerInput.value) {
          partnerId = option.dataset.value;
        }
      })

      if (partnerId) {
        partnerNames.innerHTML += `<div title="Partner ist angelegt" class="partner-name in-database">${partnerInput.value} <span data-delete="${partnerId}" onclick="deletePartner()">&#10005;</span></div>`
        hiddenPartnerInput.value += `${partnerId};&`
      } else {
        partnerNames.innerHTML += `<div title="Noch nicht angelegt" class="partner-name">${partnerInput.value} <span data-delete="${partnerInput.value}" onclick="deletePartner()">&#10005;</span></div>`
        hiddenPartnerInput.value += `${partnerInput.value};&`
      }

      partnerInput.value = ''
      partnerInput.focus();
      partnerInput.parentNode.classList.remove('has-value');
      submitButton.disabled = false;
    }
  })

  // disable submit button while partner name is being typed in
  // only enable the button if partner name is added or the input is empty
  partnerInput.addEventListener('focus', () => {
    submitButton.disabled = true;
  })

  partnerInput.addEventListener('blur', () => {
    if (!partnerInput.value) {
      submitButton.disabled = false;
    }
  })
</script>
